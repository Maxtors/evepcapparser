"""Module for the EvePcapParser and EvePcapError classes.

This file contains the classes needed to parse pcaps out from
an suricata EVE formated log (json), and write them to disk. Also
a custom error class to handle execptions it may raise.

Andreas Moe <moe.andreas@gmail.com>
"""

import logging
import json
import base64

# To avoid scapy errors at startup
logging.getLogger("scapy.runtime").setLevel(logging.ERROR)
from scapy.all import Ether, wrpcap

class EvePcapError(Exception):
    """Custom error exception for the EVE pcap parsing"""

    def __init__(self, msg):
        """Sets the given error message to an internal variable."""

        self.msg = msg

    def __str__(self):
        """Returns a string of the message if a str() is called."""

        return str(self.msg)

class EvePcapParser(object):
    """Class for parsing Pcaps from suricata EVE formated json logs."""

    def __init__(self):
        """Init function that sets up logging."""

        logging.basicConfig(level=logging.DEBUG)
        self.__logger = logging.getLogger(self.__class__.__name__)

    def parseLine(self, line, lineNumber=None):
        """Function that parses a line of an EVE log.

        This function will recive a line from a EVE json log that contains
        an event. It will try to load the line and parse it to json. After
        this is done it will decode the base64 data, and create a packet
        that can later be wraped in a pcap (to be read in f.ex tcpdump).
        """

        try:
            json_data = json.loads(line)
            
            if json_data['event_type'] == 'alert':
                packet_data = json_data['packet']
                decoded_data = base64.b64decode(packet_data)
                pcap = Ether(decoded_data)
                return pcap, json_data['timestamp']
            else:
                return None, None
        except (ValueError, KeyError), e:
            if lineNumber != None:
                raise EvePcapError('%s (line %s)' % (str(e), lineNumber))            
            else:
                raise EvePcapError(str(e))

    def parseFile(self, filename):
        """Parses a eve.json file and extracts pcaps.
        
        This function will parse a eve.json file generated by suricata
        that on a single line contains an suricata event in the EVE
        format. This function will then read in this file and parse
        out the packet data captures, and use scapy to write a pcap
        to file. The outputed filename is the timestamp in the packet.
        """

        try:
            fHandle = open(filename, 'r')
        except IOError, e:
            self.__logger.error(str(e))
            return EvePcapError('could not open file: %s' % (filename))

        data = fHandle.read()
        lines = data.split('\n')

        # Remove trailing empty array position
        if len(lines[-1]) == 0:
            lines = lines[:-1]
        
        # Loop through all the lines in the json document
        lineNumber = 0
        for line in lines:
            lineNumber += 1

            # Get the pcap and timestamp of this event logging 
            try:
                resultingPcap, timestamp = self.__parseLine(line, lineNumber)
                if resultingPcap != None:
                    wrpcap("%s.pcap" % (timestamp), resultingPcap)
            
            except EvePcapError, e:
                self.__logger.debug(str(e))
